getParameters=function()
	Par = {}
	for i=1,nMotors do
		Par[i] = {}
		for j=1,nParameters+1 do
			-- Each signal is called by robot name + motor + par
			-- for example: WalkingBiped#1_1_2
			Par[i][j] = simGetFloatSignal(Name.."_"..i.."_"..j)
			if not Par[i][j] then
				Par[i][j] = 0
			end
		end
	end
	return Par
end

threadFunction=function()

	while simGetSimulationState()~=sim_simulation_advancing_abouttostop do
		simulationTime=simGetSimulationTime()
		dt=simulationTime-previousSimulationTime
		previousSimulationTime=simulationTime
		state=simGetSimulationState()

		
		-- T = switch*A
		--for i=1,nMotors do
		w = Par[1][1]
		wt = w*simulationTime
		if math.floor(wt)%2==0 then
			flag = 1
		else
			flag = -1
		end

		-- Hip
		i = 1
		joint=Hip
		phiStart = Par[i][2]
		phiEnd = Par[i][3]
		Amplitude = flag*Par[i][4]	
		if (wt-math.floor(wt))>=phiStart and (wt-math.floor(wt))<(phiEnd+phiStart) then
			simSetJointForce(joint,Amplitude)
			simSetJointTargetVelocity(joint,500)
		else
			simSetJointForce(joint,0)
			simSetJointTargetVelocity(joint,0)
		end
		-- Hip end
		
		
		-- foot1
		i = 2
		joint=foot1
		if flag == -1 then
			i=3
		end
		phiStart = Par[i][2]
		phiEnd = Par[i][3]
		Amplitude = Par[i][4]	
		if (wt-math.floor(wt))>=phiStart and (wt-math.floor(wt))<(phiEnd+phiStart) then
			simSetJointForce(joint,Amplitude)
			simSetJointTargetVelocity(joint,500)
		else
			simSetJointForce(joint,0)
			simSetJointTargetVelocity(joint,0)
		end
		-- foot1 end

		-- foot2 --
		i = 3
		joint=foot2
		if flag == -1 then
			i=2
		end
		phiStart = Par[i][2]
		phiEnd = Par[i][3]
		Amplitude = Par[i][4]	
		if (wt-math.floor(wt))>=phiStart and (wt-math.floor(wt))<(phiEnd+phiStart) then
			simSetJointForce(joint,Amplitude)
			simSetJointTargetVelocity(joint,500)
		else
			simSetJointForce(joint,0)
			simSetJointTargetVelocity(joint,0)
		end
		-- foot2 end --

		
		-- Update the output signal
		rel_position=simGetObjectPosition(Object,line)
		
		-- distance which the robot advanced:
		Shoe1_position=simGetObjectPosition(Shoe1,line)
		Shoe2_position=simGetObjectPosition(Shoe2,line)
		avg_pos_shoes=((Shoe1_position[1]+Shoe2_position[1])*0.5)
		
		-- final hight of the robot
		HipJoint_position=simGetObjectPosition(Hip,line)
		if HipJoint_position[3] > 0.3 then
			standTimeScore = standTimeScore + 1
		end
		
		simSetFloatSignal(Name..'_1',simulationTime)
		simSetFloatSignal(Name..'_2',avg_pos_shoes)
		simSetFloatSignal(Name..'_3',rel_position[2])
		simSetFloatSignal(Name..'_4',HipJoint_position[3])
		simSetFloatSignal(Name..'_5',standTimeScore)

	    end
	end





-- Put some initialization code here:
simSetThreadSwitchTiming(20) -- Default timing for automatic thread switching

-- initialization parameters:
nMotors = 3
nParameters = 4
standTimeScore = 0
previousSimulationTime=simGetSimulationTime()
flag = 1

-- Get the robot's name and components
Script = simGetScriptHandle()
Object = simGetObjectAssociatedWithScript(Script)
Name = simGetObjectName(Object)

Hip=simGetObjectHandle('Hip')
HipPosition=simGetObjectHandle('HipPosition1')
foot1=simGetObjectHandle('foot1')
foot2=simGetObjectHandle('foot2')
Shoe1=simGetObjectHandle('Shoe1')
Shoe2=simGetObjectHandle('Shoe2')

-- Get the proper line handle
numPos = string.find(Name,"#")
if not numPos then
	robotNumber = ""
else
	robotNumber = string.sub(Name,numPos)
end
line = simGetObjectHandle("StraightLine"..robotNumber)


-- Get parameters by robot name:
Par = getParameters()
--Par={{10, 0.1, 0.8, 55}, {10, 0.1, 0.8, 55}, {10, 0.1, 0.8, 55}}

-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
	simAddStatusbarMessage('Lua runtime error: '..err)
end

-- Put some clean-up code here:
